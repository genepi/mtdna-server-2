nextflow_pipeline {

    name "Test Workflow main.nf"
    script "main.nf"
    
    test("Runs with single BAM file and mutserve") {

        when {
            params {
               project = "test-job"
               files = "$projectDir/tests/data/bam/HG00096.mapped.ILLUMINA.bwa.GBR.low_coverage.20101123.bam"
               mode = "mutserve"
               output = "out"
               output_reports = "reports"
               output_auxiliary = "files"
            }
        }

        then {
            assert workflow.success
            assert snapshot(path("${launchDir}/out/variants.annotated.txt")).match()
        }

    }

    test("Runs with BAM file including different header contigs") {

        when {
            params {
               project = "test-job"
               files = "$projectDir/tests/data/bam/mitohpc/*bam"
               mode = "mutserve"
               output = "out"
               output_reports = "reports"
               output_auxiliary = "files"
            }
        }

        then {
            assert snapshot(path("${launchDir}/out/variants.annotated.txt")).match()
        }

    }

    test("Runs with single BAM file and mutect2") {

        when {
            params {
               project = "test-job"
               files = "$projectDir/tests/data/bam/*.bam"
               mode = "mutect2"
               output = "out"
               output_reports = "reports"
               output_auxiliary = "files"
            }
        }

        then {
            assert workflow.success
            assert snapshot(path("${launchDir}/out/variants.annotated.txt")).match()
        }

    }


    test("Runs with two files and one goes through QC") {

        when {
            params {
               project = "test-job"
               files = "$projectDir/tests/data/input_validation/*.bam"
               mode = "mutect2"
               output = "out"
               output_reports = "reports"
               output_auxiliary = "files"
            }
        }

        then {
            assert workflow.success
            assert snapshot(path("${launchDir}/out/variants.annotated.txt"),workflow.trace).match()
        }

    }

    test("Runs with 6 samples provided as testdata with mutserve") {

        setup {
            DownloadUtil.downloadAndExtractZip("https://mitoverse.i-med.ac.at/downloads/6-samples.zip", "${launchDir}/input")
        }

        when {
            params {
               project = "test-job"
               files = "${launchDir}/input/*.bam"
               mode = "mutserve"
               output = "out"
               output_reports = "reports"
               output_auxiliary = "files"
            }
        }

        then {
            assert workflow.success
            assert snapshot(path("${launchDir}/out/variants.annotated.txt"),workflow.trace).match()
        }

    }

    test("Runs with 6 samples provided as testdata with mutect2") {

        setup {
            DownloadUtil.downloadAndExtractZip("https://mitoverse.i-med.ac.at/downloads/6-samples.zip", "${launchDir}/input")
        }

        when {
            params {
               project = "test-job"
               files = "${launchDir}/input/*.bam"
               mode = "mutect2"
               output = "out"
               output_reports = "reports"
               output_auxiliary = "files"
            }
        }

        then {
            assert workflow.success
            assert snapshot(path("${launchDir}/out/variants.annotated.txt"),workflow.trace).match()
        }

    }

    test("Runs with 6 samples provided as testdata with fusion") {

        setup {
            DownloadUtil.downloadAndExtractZip("https://mitoverse.i-med.ac.at/downloads/6-samples.zip", "${launchDir}/input")
        }

        when {
            params {
               project = "test-job"
               files = "${launchDir}/input/*.bam"
               mode = "fusion"
               output = "out"
               output_reports = "reports"
               output_auxiliary = "files"
            }
        }

        then {
            assert workflow.success
            assert snapshot(path("${launchDir}/out/variants.annotated.txt"),workflow.trace).match()
        }

    }

}